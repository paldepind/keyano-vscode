# Cursor is denoted by |

# Actions
- describe: join
  scenarios:
  - it: joins lines
    start: |
      wo[rd
      wo]rd
    input: t
    text is: |
      word word
  - it: removes white space
    start: |
      te[xt
        inde]nted
    input: t
    text is: |
      text indented
  - it: joins lines and selects spaces
    start: |
      fi[rst
      second
      thi]rd
    input: T
    text is: |
      first second third
    selections are: [" ", " "]


# Text objects
- describe: word
  cases:
  - describe: "#findNext()"
    scenarios:
    - it: selects the next word
      start: "|foo"
      input: ;
      selection is: foo
    - it: selects the word it's inside, left
      start: f|oo
      input: ;
      selection is: foo
    - it: selects single char
      start: "|a"
      input: ;
      selection is: a
    - it: selects the word it's inside, right
      start: fo|o
      input: ;
      selection is: foo
    - it: selects next word from end
      start: foo| bar
      input: ;
      selection is: bar
    - it: selects nothing
      start: foo bar|
      input: ;
      selection is: ""
    - it: selects single letters, far
      start: foo| a bar
      input: ;
      selection is: a
    - it: selects single letters, close
      start: foo |a bar
      input: ;
      selection is: a
    - it: selects next word from selection's end
      start: "[foo] bar"
      input: ;
      selection is: bar
    - it: selects next word, when only end of current is selected
      start: f[oo] bar
      input: ;
      selection is: bar
    - it: expands selection when end of current word isn't covered
      start: "[fo]o bar"
      input: ;
      selection is: foo
    - it: selects second word, when partly covering two words
      start: fo[o b]ar
      input: ;
      selection is: bar
    - it: should not select word seperators
      start: foo| !
      input: ;
      selection is: ""
    - it: respects various seperators, =
      start: "|foo=bar"
      input: ;
      selection is: foo
    - it: respects various seperators, ==
      start: foo|==bar
      input: ;
      selection is: bar
    - it: respects various seperators, ~~
      start: foo~|~bar
      input: ;
      selection is: bar
    - it: should not clear selection on last word
      start: foo [bar]
      input: ;
      selection is: bar
  - describe: "#findPrev()"
    scenarios:
    - it: selects word
      start: foo|
      input: j
      selection is: foo
    - it: selects single char
      start: a|
      input: j
      selection is: a
    - it: selects word its inside, right
      start: fo|o
      input: j
      selection is: foo
    - it: selects word its inside, left
      start: f|oo
      input: j
      selection is: foo
    - it: selects previous word when cursor at the beginning
      start: foo |bar
      input: j
      selection is: foo
    - it: selects nothing
      start: "|foo"
      input: j
      selection is: ""
    - it: selects single letter, far
      start: foo b |baz
      input: j
      selection is: b
    - it: selects single letter, close
      start: foo b| baz
      input: j
      selection is: b
    - it: should not select word seperators
      start: "! |foo"
      input: j
      selection is: ""
    - it: selects previous word from selection's start
      start: foo [bar]
      input: j
      selection is: foo
    - it: selects previous word when only start of current is selection
      start: foo [ba]r
      input: j
      selection is: foo
    - it: expands selection when start of current word isn't covered
      start: foo b[ar]
      input: j
      selection is: bar
    - it: selects first word when partly covering two words
      start: fo[o b]ar
      input: j
      selection is: foo
    - it: respects various seperators, =
      start: foo=bar|
      input: j
      selection is: bar
    - it: respects various seperators, ==
      start: foo==|bar
      input: j
      selection is: foo
    - it: respects various seperators, ~~
      start: foo~|~bar
      input: j
      selection is: foo
    - it: should not clear selection on last word
      start: "[foo] bar"
      input: j
      selection is: foo
  - describe: "#expand()"
    scenarios:
    - it: expands selection to word currently in
      start: fo|o
      input: ew
      selection is: foo
    - it: expands selection to word currently in, 3 words
      start: foo ba|r baz
      input: ew
      selection is: bar
    - it: expands selection to word currently touching, right
      start: foo |bar
      input: ew
      selection is: bar
    - it: expands selection to word currently touching, left
      start: foo| bar
      input: ew
      selection is: foo
    - it: expands selection to both words
      start: (foo,| bar)
      input: ew
      selection is: foo, bar
    - it: doesn't expand outside words
      start: "! [foo bar] !"
      input: ew
      selection is: foo bar
    - it: expands to word selection is covering
      start: f[oo] bar
      input: ew
      selection is: foo
    - it: expands to both words selection is covering
      start: f[oo b]ar
      input: ew
      selection is: foo bar
    - it: expands select words on both sides
      start: foo [bar] baz
      input: ew
      selection is: foo bar baz
    - it: expands to the sides it can, next
      start: "[foo] bar baz"
      input: ew
      selection is: foo bar
    - it: expands to the sides it can, previous
      start: foo bar [baz]
      input: ew
      selection is: bar baz

- describe: line
  cases:
    - describe: "#findNext()"
      scenarios:
      - it: selects current line when cursor on start
        start: "|foo bar baz"
        input: k
        selection is: foo bar baz
      - it: selects current line when cursor on start, two lines
        start: |
          |foo bar baz
          bum biz buz
        input: k
        selection is: foo bar baz
      - it: selects current line when cursor on start, middle line
        start: |
          foo bar
          |baz
          bum biz
        input: k
        selection is: baz
      - it: selects current line when inside
        start: |
          foo bar
          b|az
          bum biz
        input: k
        selection is: baz
      - it: selects line below, from the end
        start: |
          foo bar
          baz|
          bum biz
        input: k
        selection is: bum biz
      - it: selects empty line
        start: |
          foo bar|

          bum biz
        input: k
        selection is: ""
      - it: selects partly covered line, when not covering end
        start: |
          [foo b]ar
          bum biz
        input: k
        selection is: foo bar
      - it: selects line below, when covering end
        start: |
          fo[o bar]
          bum biz
        input: k
        selection is: bum biz
      - it: selects line below, when covering line
        start: |
          [foo bar]
          bum biz
        input: k
        selection is: bum biz
      - it: doesn't clear selection
        start: |
          foo bar
          [bum biz]
        input: k
        selection is: bum biz
    - describe: "#findPrev()"
      scenarios:
      - it: selects current line when cursor on end
        start: foo bar baz|
        input: l
        selection is: foo bar baz
      - it: selects current line when cursor on end, two lines
        start: |
          foo bar 
          biz baz|
        input: l
        selection is: biz baz
      - it: selects current line when cursor on end, two lines
        start: |
          foo bar 
          biz|
          baz
        input: l
        selection is: biz
      - it: selects current line when inside
        start: |
          foo
          ba|r
          baz
        input: l
        selection is: bar
      - it: selects line above, when at start
        start: |
          foo
          |bar
          baz
        input: l
        selection is: foo
      - it: selects empty line
        start: |
          foo bar

          |bum biz
        input: l
        selection is: ""
      - it: selects partly covered line, when not covering start
        start: |
          foo bar
          bu[m biz]
        input: l
        selection is: bum biz
      - it: selects line above, when covering start
        start: |
          foo bar
          [bum b]iz
        input: l
        selection is: foo bar
      - it: selects line above, when covering line
        start: |
          foo bar
          [bum biz]
        input: l
        selection is: foo bar
      - it: doesn't clear selection
        start: |
          [foo bar]
          bum biz
        input: l
        selection is: foo bar
    - describe: "#expand()"
      scenarios:
      - it: selects line currently inside
        start: foo |bar
        input: eq
        selection is: foo bar
      - it: selects line currently inside, first line
        start: |
          foo |bar
          baz
        input: eq
        selection is: foo bar
      - it: selects line currently inside, middle line
        start: |
          bum
          foo |bar
          baz
        input: eq
        selection is: foo bar
      - it: selects line currently on, left
        start: |
          foo
          |bar
          baz
        input: eq
        selection is: bar
      - it: selects line currently on, right
        start: |
          foo
          bar|
          baz
        input: eq
        selection is: bar
      - it: selects line currently on, cover end
        start: |
          foo
          b[ar]
          baz
        input: eq
        selection is: bar
      - it: selects line currently on, cover start
        start: |
          foo
          [ba]r
          baz
        input: eq
        selection is: bar
      - it: selects lines above and below
        start: |
          foo
          [bar]
          baz
        input: eq
        selection is: "foo\nbar\nbaz"
      - it: selects lines above, with none below
        start: |
          foo
          [bar]
        input: eq
        selection is: "foo\nbar"
      - it: selects lines below, with none above
        start: |
          [bar]
          baz
        input: eq
        selection is: "bar\nbaz"
      - it: returns undefined
        start: "[bar]"
        input: eq
        selection is: bar
- describe: single delimiter
  cases:
    - describe: "#findNext()"
      scenarios:
      - it: selects next pair from start of line
        start: "|\"foo bar\""
        input: n"
        selection is: "\"foo bar\""
      - it: selects next pair end of line
        start: "foo| \"bar baz\""
        input: n"
        selection is: "\"bar baz\""
      - it: selects next pair start of line
        start: "|\"foo bar\" baz"
        input: n"
        selection is: "\"foo bar\""
      - it: selects nothing when only 1 delimiter
        start: "|foo bar\" baz"
        input: n"
        selection is: ""
      - it: selects nothing when no delimiter after
        start: "\"foo\"|"
        input: n"
        selection is: ""
      - it: works for multi char delimiters
        start: "|```foo```"
        input: n~
        selection is: "```foo```"
      - it: selects next pair from selection
        start: "[\"foo bar\"] \"baz\""
        input: n"
        selection is: "\"baz\""
      - it: selects empty pair
        start: "[\"foo\"] \"\""
        input: n"
        selection is: "\"\""
    - describe: "#findPrev()"
      scenarios:
      - it: selects previous pair from end of line
        start: "\"foo bar\"|"
        input: p"
        selection is: "\"foo bar\""
      - it: selects previous pair at end of line
        start: "foo \"bar baz\"|"
        input: p"
        selection is: "\"bar baz\""
      - it: selects previous pair at start of line
        start: "\"foo bar\" |baz"
        input: p"
        selection is: "\"foo bar\""
      - it: selects nothing when only 1 delimiter
        start: "foo bar\" baz|"
        input: p"
        selection is: ""
      - it: selects nothing when no delimiter before
        start: "|\"foo\""
        input: p"
        selection is: ""
      - it: works for multi char delimiters
        start: "```foo```|"
        input: p~
        selection is: "```foo```"
      - it: selects previous pair from selection
        start: "\"foo bar\" [\"baz\"]"
        input: p"
        selection is: "\"foo bar\""
      - it: selects empty pair
        start: "\"\" [\"foo\"]"
        input: p"
        selection is: "\"\""